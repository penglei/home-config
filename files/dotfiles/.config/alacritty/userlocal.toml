[font.offset]
y = -1
[font.normal]
family = "FiraCode Nerd Font Mono" # Hack Nerd Font
style = "Light"

#family = "Arial Unicode MS"  #这里面的数学符号非常完整

#family = "FiraCode Nerd Font"
#family = "FiraCode Nerd Font Mono"
#
#family = "JetBrainsMono Nerd Font"
#family = "JetBrainsMono Nerd Font Mono"
#
#family = "Hack Nerd Font"
#family = "Hack Nerd Font Mono" #(↑ 没区别)
#
#family = "DejaVuSansMono Nerd Font
#family = "DejaVuSansMono Nerd Font Mono #(↑ 没区别)

[colors.search.matches]
# Allowed values are CellForeground/CellBackground, which reference the
# affected cell, or hexadecimal colors like #ff00ff.
foreground = "#ffffff"
background = "#ff00ff"
[colors.search.focused_match]
foreground = "#6e4962"
background = "#86d3ce"

[shell]
#program: /Users/penglei/.local/bin/myprintenv # we will see SSH_AUTH_SOCK is set
#program: /bin/zsh
#args: ["-c", "unset SSH_AUTH_SOCK;exec -a -zsh /bin/zsh"]

program = "/usr/bin/login"
args = ["-flp", "penglei", "/bin/zsh", "-c", "exec -a -zsh /bin/zsh"]
#args: ["-flp", penglei, "/bin/zsh", "-c", "echo $SSH_AUTH_SOCK;exec -a -zsh /bin/zsh"]
#args: ["-flp", "penglei", "/bin/zsh", "-c", "exec /bin/zsh --login"] #另一个等价的写法
#args: ["-flp", "penglei", "/bin/zsh", "-c", "exec -a -haha /bin/zsh"]
#args: ["-flp", "penglei", "/bin/zsh", "-c", "exec -a -🐶🐶- /bin/zsh"]
##这里相当有技巧性: 第一个zsh不是login shell，并且是non-interactive，所以什么配置都不会加载；
##第二个是login shell并且是interactive(没要-c)
# // Exec the shell with argv[0] prepended by '-' so it becomes a login shell.
# // `login` normally does this itself, but `-l` disables this.
# let exec = format!("exec -a -{} {}", shell_name, shell);
# // -f: Bypasses authentication for the already-logged-in user.
# // -l: Skips changing directory to $HOME and prepending '-' to argv[0].
# // -p: Preserves the environment.
#args: ["-fp", "penglei", "/bin/zsh" ]  #每个window都是HOME目录
#-f: 已经认证过了，不需要再输入密码
#-l: 不是登录shell(login程序默认是登录shell)，即不用加载profile了；登录shell的工作目录是HOME目录
#-p: 不要丢弃之前的环境变量；
